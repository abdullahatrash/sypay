---
// Header & Navigation UI displayed on each page.

import LocaleSelect from "@/components/i18n/LocaleSelect.astro";
import { Image } from "astro:assets";
import { useTranslations, type Lang } from "@/i18n";
import { getRelativeLocaleUrl } from "astro:i18n";
const t = useTranslations(Astro.currentLocale as Lang);

import AstroImage from "@/assets/astro-logo.svg";

const locale = Astro.currentLocale as Lang;

const isActive = (path: string) =>
  getRelativeLocaleUrl(locale, path) === Astro.url.pathname;
---

<header class="l-header">
  <div class="header-container">
    <!-- Logo -->
    <div class="logo">
      <a href={getRelativeLocaleUrl(locale, "/")}>
        <Image src={AstroImage} alt="Astro" />
        <span>i18n Starter</span>
      </a>
    </div>

    <!-- Navigation -->
    <nav class="main-nav">
      <ul>
        <li>
          <a
            href={getRelativeLocaleUrl(locale, "/setup")}
            class={isActive("/setup") ? "active" : null}
          >
            {t({ ja: "設定", en: "Setup", "zh-cn": "设置", ar: "إعداد" })}
          </a>
        </li>

        <li>
          <a
            href={getRelativeLocaleUrl(locale, "/page")}
            class={isActive("/page") ? "active" : null}
          >
            {t({
              ja: "ページの追加",
              en: "Add Page",
              "zh-cn": "添加页面",
              ar: "إضافة صفحة",
            })}
          </a>
        </li>

        <li>
          <a
            href={getRelativeLocaleUrl(locale, "/feature")}
            class={isActive("/feature") ? "active" : null}
          >
            {t({
              ja: "その他の機能",
              en: "Features",
              "zh-cn": "特性",
              ar: "الميزات",
            })}
          </a>
        </li>

        <li class="en-only">
          <a
            href={getRelativeLocaleUrl(locale, "/monolingual")}
            class={isActive("/monolingual") ? "active" : null}
          >
            Monolingual
          </a>
        </li>

        <li>
          <a
            href={getRelativeLocaleUrl(locale, "/blog")}
            class={isActive("/blog") ? "active" : null}
          >
            {t({ ja: "ブログ", en: "Blog", "zh-cn": "博客", ar: "مدونة" })}
          </a>
        </li>
      </ul>
    </nav>

    <!-- Language Selector -->
    <div class="lang-select">
      <LocaleSelect />
    </div>
  </div>
</header>

<style>
  .l-header {
    background: var(--color-base);
    border-bottom: 1px solid color-mix(in srgb, var(--color-main) 10%, transparent);
    padding: var(--sp-s) 0;
    position: sticky;
    top: 0;
    z-index: 100;
    backdrop-filter: blur(8px);
  }

  .header-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 var(--sp-s);
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: var(--sp-m);
  }

  /* Logo styles */
  .logo {
    flex-shrink: 0;
    
    a {
      display: flex;
      align-items: center;
      gap: 0.5em;
      font-weight: 900;
      font-family: var(--english-font);
      font-size: 1.2rem;
    }

    img {
      width: 2em;
      height: auto;
    }
  }

  /* Navigation styles */
  .main-nav {
    flex: 1;
    
    ul {
      display: flex;
      justify-content: center;
      gap: var(--sp-sm);
      margin: 0;
      padding: 0;
      list-style: none;
    }

    a {
      font-size: 1rem;
      font-weight: 600;
      padding: 0.5em 0.8em;
      border-radius: 4px;
      transition: background-color 0.2s;

      &:hover {
        background-color: color-mix(in srgb, var(--color-theme) 5%, transparent);
      }

      &.active {
        color: var(--color-theme);
      }
    }
  }

  /* Language selector styles */
  .lang-select {
    flex-shrink: 0;
  }

  /* RTL Support */
  :dir(rtl) {
    .header-container {
      flex-direction: row-reverse;
    }
    
    .logo a {
      flex-direction: row-reverse;
    }
  }

  /* Responsive design */
  @media (width < 768px) {
    .header-container {
      flex-direction: column;
      padding: var(--sp-s);
    }

    .main-nav ul {
      flex-wrap: wrap;
      gap: var(--sp-s);
    }

    :dir(rtl) .header-container {
      flex-direction: column;
    }
  }
</style>
